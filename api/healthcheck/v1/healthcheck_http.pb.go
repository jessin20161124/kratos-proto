// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.27.0
// source: healthcheck/v1/healthcheck.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHealthcheckServerLivenessProbe = "/healthcheck.v1.HealthcheckServer/LivenessProbe"
const OperationHealthcheckServerReadinessProbe = "/healthcheck.v1.HealthcheckServer/ReadinessProbe"

type HealthcheckServerHTTPServer interface {
	LivenessProbe(context.Context, *LivenessRequest) (*LivenessReply, error)
	ReadinessProbe(context.Context, *ReadinessRequest) (*ReadinessReply, error)
}

func RegisterHealthcheckServerHTTPServer(s *http.Server, srv HealthcheckServerHTTPServer) {
	r := s.Route("/")
	r.GET("/liveness", _HealthcheckServer_LivenessProbe0_HTTP_Handler(srv))
	r.GET("/readiness", _HealthcheckServer_ReadinessProbe0_HTTP_Handler(srv))
}

func _HealthcheckServer_LivenessProbe0_HTTP_Handler(srv HealthcheckServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LivenessRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHealthcheckServerLivenessProbe)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LivenessProbe(ctx, req.(*LivenessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LivenessReply)
		return ctx.Result(200, reply)
	}
}

func _HealthcheckServer_ReadinessProbe0_HTTP_Handler(srv HealthcheckServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadinessRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHealthcheckServerReadinessProbe)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadinessProbe(ctx, req.(*ReadinessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadinessReply)
		return ctx.Result(200, reply)
	}
}

type HealthcheckServerHTTPClient interface {
	LivenessProbe(ctx context.Context, req *LivenessRequest, opts ...http.CallOption) (rsp *LivenessReply, err error)
	ReadinessProbe(ctx context.Context, req *ReadinessRequest, opts ...http.CallOption) (rsp *ReadinessReply, err error)
}

type HealthcheckServerHTTPClientImpl struct {
	cc *http.Client
}

func NewHealthcheckServerHTTPClient(client *http.Client) HealthcheckServerHTTPClient {
	return &HealthcheckServerHTTPClientImpl{client}
}

func (c *HealthcheckServerHTTPClientImpl) LivenessProbe(ctx context.Context, in *LivenessRequest, opts ...http.CallOption) (*LivenessReply, error) {
	var out LivenessReply
	pattern := "/liveness"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHealthcheckServerLivenessProbe))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HealthcheckServerHTTPClientImpl) ReadinessProbe(ctx context.Context, in *ReadinessRequest, opts ...http.CallOption) (*ReadinessReply, error) {
	var out ReadinessReply
	pattern := "/readiness"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHealthcheckServerReadinessProbe))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
