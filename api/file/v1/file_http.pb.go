// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.27.0
// source: file/v1/file.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFileServerGetFile = "/file.v1.FileServer/GetFile"

type FileServerHTTPServer interface {
	// GetFile Sends a greeting
	GetFile(context.Context, *FileRequest) (*FileReply, error)
}

func RegisterFileServerHTTPServer(s *http.Server, srv FileServerHTTPServer) {
	r := s.Route("/")
	r.GET("/file/{file_id}", _FileServer_GetFile0_HTTP_Handler(srv))
}

func _FileServer_GetFile0_HTTP_Handler(srv FileServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServerGetFile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFile(ctx, req.(*FileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FileReply)
		return ctx.Result(200, reply)
	}
}

type FileServerHTTPClient interface {
	GetFile(ctx context.Context, req *FileRequest, opts ...http.CallOption) (rsp *FileReply, err error)
}

type FileServerHTTPClientImpl struct {
	cc *http.Client
}

func NewFileServerHTTPClient(client *http.Client) FileServerHTTPClient {
	return &FileServerHTTPClientImpl{client}
}

func (c *FileServerHTTPClientImpl) GetFile(ctx context.Context, in *FileRequest, opts ...http.CallOption) (*FileReply, error) {
	var out FileReply
	pattern := "/file/{file_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFileServerGetFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
